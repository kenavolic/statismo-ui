// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "gen-cpp/UI.h"

#include <thrift/protocol/TBinaryProtocol.h>

#include <thrift/protocol/TCompactProtocol.h>

#include <thrift/transport/TSocket.h>
#include <thrift/transport/TTransportUtils.h>
#include <iostream>
#include "itkMesh.h"
#include "itkStatismoIO.h"
#include "itkStandardMeshRepresenter.h"
#include "itkStatisticalModel.h"

using namespace apache::thrift;
using namespace apache::thrift::protocol;
using namespace apache::thrift::transport;

using namespace boost;

int main(int argc, char **argv) {
  shared_ptr<TTransport> socket(new TSocket("localhost", 8000));
  shared_ptr<TTransport> transport(new TFramedTransport(socket));
  shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
  ui::UIClient theui(protocol);



  typedef itk::Mesh<float, 3> MeshType;
  typedef itk::StandardMeshRepresenter<float, 3> RepresenterType;
  RepresenterType::Pointer representer = RepresenterType::New();
  itk::StatisticalModel<MeshType>::Pointer model = itk::StatismoIO<MeshType>::LoadStatisticalModel(representer, "/tmp/facemodel.h5");

  MeshType::Pointer meanMesh = model->DrawSample();

  try {
    transport->open();
    ui::PointList pts;

    for (unsigned i = 0; i < meanMesh->GetNumberOfPoints(); i++) {
        ui::Point p;
      MeshType::PointType pt = meanMesh->GetPoint(i);
        p.x= pt.GetElement(0); p.y = pt.GetElement(1); p.z = pt.GetElement(2);
        pts.push_back(p);
    }

    ui::TriangleCellList cells;
    for (unsigned i = 0; i < meanMesh->GetNumberOfCells(); i++) {
      ui::TriangleCell c;
      MeshType::CellType* cell = meanMesh->GetCells()->GetElement(i);
      c.id1 = cell->GetPointIdsContainer().GetElement(0);
      c.id2 = cell->GetPointIdsContainer().GetElement(1);
      c.id3 = cell->GetPointIdsContainer().GetElement(2);
      cells.push_back(c);
    }

    ui::TriangleMesh thriftMesh;
    thriftMesh.vertices = pts;
    thriftMesh.topology = cells;

    theui.showTriangleMesh(thriftMesh);
    // We calculate the following expression.  The variable names correspond to the operator they
    // appear under here:
    // ((5 * 2) + ((7 - 3) * 10)) / (6 - 4)
    //     a    e     b    d      f    c
    // The result should be 25.

    // std::cout << "starting requests..." << std::endl;
    // theui.ping();
    // std::cout << "ping called" << std::endl;
    // // Thift's approach to async is weird.  You have to order your sends and recvs...

    // for (unsigned i = 0; i < 100; ++i) { 
    //   std::cout << "before send " << std::endl;
    //   std::cout << "theui " << theui.add(3, 5) << std::endl;
    //   std::cout << "after send" << std::endl;
    // }
    transport->close();
  } catch (TException& tx) {
    std::cout << "ERROR: " << tx.what() << std::endl;
  }

  return 0;
}
